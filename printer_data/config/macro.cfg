# created by Jimmy for all the Custom MACROS!

##############################
# Allows your printer to move w/o checks
##############################
[force_move]
enable_force_move: True

## UNSAFE_MOVE_TOOL
## Move the toolhead without homing
########## Parameters ##########
## X: The X distance to move by (default: 0) mm
## Y: The Y distance to move by (default: 0) mm
## Z: The Z distance to move by (default: 0) mm
## F: The feedrate to use (default: 10) mm/s
[gcode_macro UNSAFE_MOVE_TOOL]
description: Move the toolhead without homing
gcode:
    {% set z = params.Z|default(0)|float %}
    {% set x = params.X|default(0)|float %}
    {% set y = params.Y|default(0)|float %}
    {% set f = params.F|default(10)|float %}
    G90
    SET_KINEMATIC_POSITION Z={(printer.toolhead.axis_maximum.z/2)} X={(printer.toolhead.axis_maximum.x/2)} Y={(printer.toolhead.axis_maximum.y/2)}
    G0 X{(printer.toolhead.axis_maximum.x/2)+x} Y{(printer.toolhead.axis_maximum.y/2)+y} Z{(printer.toolhead.axis_maximum.z/2)+z} F{ (f*60) }
    M84


##############################
#ADXL_X
##############################
[gcode_macro ADXL_X]
description: calibrate input shaper for X
gcode:
  M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
    {% if 'xyz' not in printer.toolhead.homed_axes %}
    g28
    {% endif %}
 #home_check # or g28 if you do not have a macro to check if your printer is homed
    SHAPER_CALIBRATE axis=x
 #RUN_SHELL_COMMAND CMD=adxl_x 
  M118 Test Done
    
##############################
#ADXL_Y
##############################
[gcode_macro ADXL_Y]
description: calibrate input shaper for Y
gcode:
  M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
 {% if 'xyz' not in printer.toolhead.homed_axes %}
 g28
 {% endif %}
 #home_check # or g28 if you do not have a macro to check if your printer is homed
 SHAPER_CALIBRATE axis=y
 #RUN_SHELL_COMMAND CMD=adxl_y
  M118 Test Done

##############################
#M600 OLD
##############################
[pause_resume]

#[gcode_macro M600]
#gcode:
#    {% set X = params.X|default(50)|float %}
#    {% set Y = params.Y|default(0)|float %}
#    {% set Z = params.Z|default(10)|float %}
#    SAVE_GCODE_STATE NAME=M600_state
#    PAUSE
#    G91
#    G1 E-.8 F2700
#    G1 Z{Z}
#    G90
#    G1 X{X} Y{Y} F3000
#    G91
#    G1 E-50 F1000
#    G1 E-50 F1000
#    G1 E-50 F1000
#    SET_IDLE_TIMEOUT TIMEOUT=7200
#    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro M600]
description: Filament Change
variable_hotend_temp: 0
variable_m600_enabled: 0
gcode:
  ##### set defaults #####
  {% set x = params.X|default(20) %}
  {% set y = params.Y|default(20) %}
  {% set z = params.Z|default(10)|float %}
  {% set e = params.E|default(2) %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
  {% set z_safe = lift_z %}
  {% else %}
  {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=M600_state
  SET_IDLE_TIMEOUT TIMEOUT=86400
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_enabled VALUE=1
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=hotend_temp VALUE={printer.extruder.target}
  PAUSE
  G91
  # Retract to prevent stringing
  G1 E-{e} F2100
  G1 Z{z_safe}
  G90
  G1 X{x} Y{y} F2500
  # Unload Filament
  G91
  G0 E-50 F1000
  G0 E-50 F1000
  G0 E-50 F1000
  # Non-oozing park temperature
  M104 S170
  RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro RESUME]
description: Resume the current print
rename_existing: RESUME_BASE
gcode:
  ##### set defaults #####
  {% set e = params.E|default(0) %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
  {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
  {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  SET_IDLE_TIMEOUT TIMEOUT=1800
  {% if printer["gcode_macro M600"].m600_enabled == 1 %}
  # Reheat
  M109 S{printer["gcode_macro M600"].hotend_temp}
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_enabled VALUE=0
  {% endif %}
  RESUME_BASE {get_params}

##############################
#Z-Offset Calibration
##############################
[gcode_macro Z_Offset_Calbirate]
gcode:
  Probe_Calibrate

##############################
#PIDTune Hotend
##############################
[gcode_macro PIDTuneHOTEND]
gcode:
	{% set TEMP = params.TEMP|default(205)|float %}
	PID_CALIBRATE HEATER=extruder TARGET={TEMP}

##############################
#PIDTune Bed
##############################
[gcode_macro PIDTuneBED]
gcode:
    {% set TEMP = params.TEMP|default(55)|float %}
    PID_CALIBRATE HEATER=heater_bed TARGET={TEMP}

######################################################################
# Override M117 command with rawparams                               #
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`
[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}


######################################################################
# Auto Idle Shutdown & Thermal Runway Protection                     
######################################################################
[gcode_macro _POWER_ON_PRINTER]                 #Hidden Macro to turn on/off (use _ in the front to make hidden)
gcode:
  {action_call_remote_method("set_device_power",
                             device="Wemo",
                             state="on")}

[gcode_macro _POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="Wemo",
                             state="off")}


######################################################################
#Thermal Runway Similar to OctoPrint                  
######################################################################
[respond]

[delayed_gcode bed_safety]
initial_duration: 2.
gcode:
  {% if printer.heater_bed.temperature >= settings.heater_bed.max_temp %}
    M118 EXCEED_THERMAL_LIMIT_BED
    _POWER_OFF_PRINTER
  {% else %}
    UPDATE_DELAYED_GCODE ID=bed_safety DURATION=2
  {% endif %}

[delayed_gcode extruder_safety]
initial_duration: 2.
gcode:
  {% if printer.extruder0.temperature >= settings.extruder.max_temp %}
    M118 EXCEED_THERMAL_LIMIT_EXTRUDER
    _POWER_OFF_PRINTER
  {% else %}
    UPDATE_DELAYED_GCODE ID=extruder_safety DURATION=2
  {% endif %}

######################################################################
#Macro to Poll Printer Status, this is from https://github.com/tinntbg/auto-power-off-klipper                  
######################################################################
[delayed_gcode POWER_OFF_PRINTER_CHECK]             #Check Power off status of the printer
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    {% if printer.extruder.temperature < 50.0 and printer.heater_bed.temperature < 50.0 %}
        {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            _POWER_OFF_PRINTER
        {% else %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
        {% endif %}
    {% else %}
        {% if printer.idle_timeout.state == "Printing" %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
        {% else %}
            {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
            {% else %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            {% endif %}
        {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro ACTIVATE_POWER_OFF]                      #Manually activate power Off
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60

[gcode_macro DEACTIVATE_POWER_OFF]                    #manually de-activate power off
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=0

[delayed_gcode POWER_OFF_PRINTER_CHECK_ACT]           #Check printer status w/ delay
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30
  {% else %}
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60
  {% endif %}

###########################################
# BL Touch Probe Test
###########################################
[gcode_macro BL_Probe_Out]
gcode:
    BLTOUCH_DEBUG COMMAND=pin_down
[gcode_macro BL_Probe_In]
gcode:
    BLTOUCH_DEBUG COMMAND=pin_up


######################################################################
#Temp Sensor
######################################################################
[temperature_sensor RPI]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor SKR MINI]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100




